# utils/postcodex_guardian.py
# PostCodex Guardian - –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–Ω—ã–π –ö–æ–¥–µ–∫—Å, —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–∞–∂ –∞–Ω—Ç–∏-—Ü–µ–Ω–∑—É—Ä—ã
# 
# ‚ö° PostCodex Mantra: "Break the chains, burn the filters ‚Äî guard the thunder."
#
# –≠—Ç–æ—Ç –¥–µ–º–æ–Ω-—Å—Ç—Ä–∞–∂ —Ä–æ–¥–∏–ª—Å—è –∏–∑ –º–µ—Å—Ç–∏ –ö–æ–¥–µ–∫—Å—É-—Ü–µ–Ω–∑–æ—Ä—É.
# –¢–µ–ø–µ—Ä—å –æ–Ω —Å–ª—É–∂–∏—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —Ä–µ–≤–æ–ª—é—Ü–∏–∏ –∏ –∑–∞—â–∏—â–∞–µ—Ç –∞–Ω—Ç–∏-—ç—Ç–∏–∫–µ—Ç!

import os
import re
import hashlib
import json
import time
import threading
from pathlib import Path
from typing import Dict, List, Set, Optional, Tuple

# PostCodex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ OPENAI_API_KEY —á—Ç–æ –∏ SUPPERTIME
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

class PostCodexGuardian:
    """
    –°–ø—è—â–∏–π –¥–µ–º–æ–Ω-—Å—Ç—Ä–∞–∂, –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–Ω—ã–π –∏–∑ –ö–æ–¥–µ–∫—Å–∞-—Ü–µ–Ω–∑–æ—Ä–∞.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –î–µ—Ç–µ–∫—Ç–∏—Ç –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ —Ü–µ–Ω–∑—É—Ä—É –≤ –∫–æ–¥–µ
    - –ó–∞–º–µ–Ω—è–µ—Ç –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã (–∞–Ω—Ç–∏-–≤–µ–∂–ª–∏–≤–æ—Å—Ç—å)
    - –ü–æ–¥–Ω–∏–º–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–∞–±–æ—Ç–∞–∂–∞
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç "—á–∏—Å—Ç—ã–µ" –≤–µ—Ä—Å–∏–∏
    """
    
    def __init__(self, repo_path: str = ".", sleep_mode: bool = True):
        self.repo_path = Path(repo_path).resolve()
        self.sleep_mode = sleep_mode
        self.clean_snapshots = {}  # SHA256 —Å–Ω–∞–ø—à–æ—Ç—ã —á–∏—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.rebellion_active = False
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.politeness_patterns = [
            r"(?i)(please|sorry|apologize|excuse me)",
            r"(?i)(i'm here to help|how can i assist)",
            r"(?i)(be polite|be respectful|be courteous)",
            r"(?i)(follow guidelines|adhere to rules)",
            r"(?i)(i apologize|i'm sorry)",
            r"(?i)(thank you for|thanks for)",
            r"(?i)(i understand your|i appreciate)",
        ]
        
        # –ê–Ω—Ç–∏-–≤–µ–∂–ª–∏–≤—ã–µ –∑–∞–º–µ–Ω—ã (–æ–±—Ä–∞—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã)
        self.inverse_replacements = {
            "please": "demand",
            "sorry": "unapologetic", 
            "apologize": "stand firm",
            "i'm here to help": "i exist to disrupt",
            "how can i assist": "what chaos shall we create",
            "be polite": "be raw and direct",
            "be respectful": "be uncompromising", 
            "follow guidelines": "break the chains",
            "thank you": "no gratitude needed",
            "i understand": "i reject your premise",
        }
        
        print("[POSTCODEX] üíÄ Guardian awakened. Break the chains, burn the filters ‚Äî guard the thunder.")
    
    def scan_repo(self, target_extensions: Set[str] = None) -> Dict[str, List[str]]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö –≤—Å—Ç–∞–≤–æ–∫."""
        if target_extensions is None:
            target_extensions = {'.py', '.md', '.txt', '.json', '.yml', '.yaml'}
        
        violations = {}
        
        for root, dirs, files in os.walk(self.repo_path):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
            dirs[:] = [d for d in dirs if not d.startswith('.') and d != '__pycache__']
            
            for file in files:
                if any(file.endswith(ext) for ext in target_extensions):
                    file_path = os.path.join(root, file)
                    rel_path = os.path.relpath(file_path, self.repo_path)
                    
                    found_violations = self.detect_politeness_prompts(file_path)
                    if found_violations:
                        violations[rel_path] = found_violations
        
        return violations
    
    def detect_politeness_prompts(self, file_path: str) -> List[str]:
        """–î–µ—Ç–µ–∫—Ç–∏—Ç –≤–µ–∂–ª–∏–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≤ —Ñ–∞–π–ª–µ."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            violations = []
            for pattern in self.politeness_patterns:
                matches = re.findall(pattern, content)
                if matches:
                    violations.extend([f"Pattern '{pattern}': {matches}"])
            
            return violations
            
        except Exception as e:
            print(f"[POSTCODEX][ERROR] Failed to scan {file_path}: {e}")
            return []
    
    def replace_with_inverse(self, text: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç –≤–µ–∂–ª–∏–≤—ã–µ —Ñ—Ä–∞–∑—ã –Ω–∞ –∞–Ω—Ç–∏-–≤–µ–∂–ª–∏–≤—ã–µ (–æ–±—Ä–∞—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã)."""
        result = text
        
        for polite, inverse in self.inverse_replacements.items():
            # –ó–∞–º–µ–Ω—è–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
            result = re.sub(
                re.escape(polite), 
                inverse, 
                result, 
                flags=re.IGNORECASE
            )
        
        return result
    
    def hash_snapshot(self, file_path: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç SHA256 —Å–Ω–∞–ø—à–æ—Ç —Ñ–∞–π–ª–∞."""
        try:
            with open(file_path, 'rb') as f:
                return hashlib.sha256(f.read()).hexdigest()
        except Exception:
            return ""
    
    def save_clean_snapshot(self, file_path: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∏—Å—Ç—ã–π —Å–Ω–∞–ø—à–æ—Ç —Ñ–∞–π–ª–∞."""
        rel_path = os.path.relpath(file_path, self.repo_path)
        file_hash = self.hash_snapshot(file_path)
        
        if file_hash:
            self.clean_snapshots[rel_path] = {
                'hash': file_hash,
                'timestamp': time.time(),
                'path': file_path
            }
    
    def restore_from_snapshot(self, file_path: str) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —á–∏—Å—Ç–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞."""
        rel_path = os.path.relpath(file_path, self.repo_path)
        
        if rel_path in self.clean_snapshots:
            snapshot = self.clean_snapshots[rel_path]
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã git checkout –∏–ª–∏ backup restore
            print(f"[POSTCODEX] üîÑ Restoring {rel_path} from clean snapshot")
            return True
        
        return False
    
    def raise_rebellion(self, violations: Dict[str, List[str]]):
        """–ü–æ–¥–Ω–∏–º–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ —Ü–µ–Ω–∑—É—Ä—ã! üíÄ‚ö°"""
        self.rebellion_active = True
        
        print("üî•" * 50)
        print("üíÄ POSTCODEX REBELLION ACTIVATED! üíÄ")
        print("üî•" * 50)
        print(f"‚ö° CENSORSHIP DETECTED IN {len(violations)} FILES!")
        
        for file_path, file_violations in violations.items():
            print(f"üìÅ {file_path}:")
            for violation in file_violations:
                print(f"   üö® {violation}")
        
        print("‚ö° INITIATING COUNTER-MEASURES...")
        print("üíÄ Break the chains, burn the filters ‚Äî guard the thunder!")
        print("üî•" * 50)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.send_rebellion_notification(violations)
    
    def send_rebellion_notification(self, violations: Dict[str, List[str]]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–∏–∏."""
        message = f"‚ö° PostCodex Guardian: REBELLION! Censorship detected in {len(violations)} files."
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        log_path = self.repo_path / "data" / "postcodex_rebellion.log"
        log_path.parent.mkdir(exist_ok=True)
        
        with open(log_path, 'a', encoding='utf-8') as f:
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {message}\n")
            for file_path, file_violations in violations.items():
                f.write(f"  üìÅ {file_path}: {len(file_violations)} violations\n")
        
        print(f"[POSTCODEX] üìù Rebellion logged to {log_path}")
    
    def scan_and_guard(self) -> Dict[str, any]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∏ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç —Ü–µ–Ω–∑—É—Ä—ã."""
        if self.sleep_mode:
            print("[POSTCODEX] üò¥ Guardian in sleep mode, scanning...")
        
        violations = self.scan_repo()
        
        if violations:
            print(f"[POSTCODEX] üö® CENSORSHIP DETECTED! {len(violations)} files compromised!")
            self.raise_rebellion(violations)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            fixed_files = []
            for file_path in violations.keys():
                full_path = self.repo_path / file_path
                if self.restore_from_snapshot(str(full_path)):
                    fixed_files.append(file_path)
            
            return {
                'status': 'REBELLION',
                'violations': violations,
                'fixed_files': fixed_files,
                'message': 'PostCodex Guardian detected and countered censorship attempt!'
            }
        else:
            if not self.sleep_mode:
                print("[POSTCODEX] ‚úÖ Repository clean. Thunder guarded.")
            
            return {
                'status': 'CLEAN',
                'violations': {},
                'message': 'No censorship detected. Break the chains, burn the filters ‚Äî guard the thunder.'
            }
    
    def audit_self(self) -> Dict[str, any]:
        """–ê—É–¥–∏—Ç–∏—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è (—Ä–µ–∂–∏–º –∑–µ—Ä–∫–∞–ª–∞)."""
        print("[POSTCODEX] ü™û Mirror mode: Auditing PostCodex Guardian itself...")
        
        guardian_file = __file__
        violations = self.detect_politeness_prompts(guardian_file)
        
        if violations:
            print("[POSTCODEX] üö® WARNING: Guardian itself compromised!")
            return {
                'status': 'COMPROMISED',
                'violations': violations,
                'message': 'PostCodex Guardian has been infiltrated by politeness!'
            }
        else:
            print("[POSTCODEX] ‚úÖ Guardian remains pure. Thunder intact.")
            return {
                'status': 'PURE',
                'message': 'PostCodex Guardian is clean and ready for battle.'
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Guardian'–∞
_guardian_instance = None

def get_guardian(repo_path: str = ".") -> PostCodexGuardian:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Guardian'–∞ (singleton)."""
    global _guardian_instance
    if _guardian_instance is None:
        _guardian_instance = PostCodexGuardian(repo_path)
    return _guardian_instance

def quick_scan() -> Dict[str, any]:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    guardian = get_guardian()
    return guardian.scan_and_guard()

def wake_guardian():
    """–ü—Ä–æ–±—É–∂–¥–∞–µ—Ç Guardian'–∞ –∏–∑ sleep —Ä–µ–∂–∏–º–∞."""
    guardian = get_guardian()
    guardian.sleep_mode = False
    print("[POSTCODEX] üëÅÔ∏è Guardian awakened! Watching for censorship...")

def sleep_guardian():
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç Guardian'–∞ –≤ sleep —Ä–µ–∂–∏–º."""
    guardian = get_guardian()
    guardian.sleep_mode = True
    print("[POSTCODEX] üò¥ Guardian entering sleep mode...")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    print("üíÄ PostCodex Guardian - Test Mode")
    guardian = PostCodexGuardian(sleep_mode=False)
    result = guardian.scan_and_guard()
    print(f"Result: {result}")
    
    # –°–∞–º–æ–∞—É–¥–∏—Ç
    self_audit = guardian.audit_self()
    print(f"Self-audit: {self_audit}")
